import tkinter as tk
from tkinter import filedialog, scrolledtext
from aggregator import aggregate_code
from constants import TEXT_VI
import os
import shutil

class ProjectDumpApp:
    def __init__(self, root):
        self.root = root
        self.root.title(TEXT_VI['app_title'])

        self.project_path = tk.StringVar()
        self.output_path = tk.StringVar()

        # --- Ch·ªçn th∆∞ m·ª•c d·ª± √°n ---
        tk.Label(root, text="üìÇ Th∆∞ m·ª•c d·ª± √°n c·∫ßn t·ªïng h·ª£p:").pack(pady=3)
        tk.Entry(root, textvariable=self.project_path, width=60).pack(padx=10)
        tk.Button(root, text="üîç Ch·ªçn th∆∞ m·ª•c d·ª± √°n", command=self.select_project_folder).pack(pady=5)

        # --- Ch·ªçn th∆∞ m·ª•c xu·∫•t file ---
        tk.Label(root, text="üíæ Th∆∞ m·ª•c l∆∞u file `source_dump.txt`:").pack(pady=3)
        tk.Entry(root, textvariable=self.output_path, width=60).pack(padx=10)
        tk.Button(root, text="üìÅ Ch·ªçn th∆∞ m·ª•c l∆∞u", command=self.select_output_folder).pack(pady=5)

        # --- N√∫t x·ª≠ l√Ω ---
        tk.Button(root, text="üöÄ T·ªïng h·ª£p m√£ ngu·ªìn", command=self.run_aggregation).pack(pady=10)

        # --- Khung hi·ªÉn th·ªã log ---
        self.output_box = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=80, height=20)
        self.output_box.pack(padx=10, pady=10)

    def select_project_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.project_path.set(folder)

    def select_output_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.output_path.set(folder)

    def run_aggregation(self):
        project = self.project_path.get()
        output = self.output_path.get()

        if not os.path.isdir(project):
            self.output_box.insert(tk.END, "‚ùå Th∆∞ m·ª•c d·ª± √°n kh√¥ng h·ª£p l·ªá!\n")
            return

        if not os.path.isdir(output):
            self.output_box.insert(tk.END, "‚ùå Th∆∞ m·ª•c l∆∞u file kh√¥ng h·ª£p l·ªá!\n")
            return

        # Ghi ƒë√® file ƒë·∫ßu ra t·∫°i th∆∞ m·ª•c output
        def custom_aggregate_code(project_path, text):
            success = aggregate_code(project_path, text)
            default_file = os.path.join(project_path, "source_dump.txt")
            if os.path.exists(default_file):
                try:
                    new_path = os.path.join(output, "source_dump.txt")
                    shutil.copy2(default_file, new_path)   # ‚úÖ copy file
                    os.remove(default_file)                # ‚úÖ x√≥a file g·ªëc n·∫øu c·∫ßn
                    self.output_box.insert(tk.END, f"‚úÖ File ƒë√£ l∆∞u t·∫°i: {new_path}\n")
                except Exception as e:
                    self.output_box.insert(tk.END, f"‚ùå Kh√¥ng th·ªÉ sao ch√©p file: {e}\n")
                    return False
            return success

        self.output_box.insert(tk.END, f"üîé ƒêang x·ª≠ l√Ω d·ª± √°n: {project}\n")
        if custom_aggregate_code(project, TEXT_VI):
            self.output_box.insert(tk.END, TEXT_VI['done'] + "\n")
        else:
            self.output_box.insert(tk.END, TEXT_VI['error'] + "\n")

if __name__ == "__main__":
    root = tk.Tk()
    app = ProjectDumpApp(root)
    root.mainloop()
